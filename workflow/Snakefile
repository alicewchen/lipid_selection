##### load config and sample sheets #####

configfile: "../config/config.yaml"
pool= ['candidate', 'noncandidate']
sample= list(range(config["SAMPLE_N"])) 
rule all:
    input:
        expand(["../data/workflow/pools/{pool}.pk",
        "log/notebook/01_Filter_genes_processed_{pool}.ipynb"], pool = pool),
        expand(["../data/workflow/samples/{pool}_{sample}.pk",
        "../data/workflow/bootstrap/run_{sample}/{pool}/SFS_input.txt",
        "../data/workflow/bootstrap/run_{sample}/{pool}/divergence_file.txt"], pool = pool, sample = sample)
        
#1. Filter genes

rule filter_genes:
    input:
        "../data/workflow/clean_primary_data.pk",
        "../data/workflow/sampled_genes.pk",
        "../data/workflow/SFS_and_divergence.pk"
    output:
        "../data/workflow/pools/{pool}.pk"
    params:
        prefix = "../data/workflow/pools/{pool}.pk"
    log:
        notebook="log/notebook/01_Filter_genes_processed_{pool}.ipynb"
    notebook:
        "../analysis/04_filter_data/01_Filter_genes.ipynb"
        
#2. Boostrapping

#2a. Randomly sample n = RSAMPLE_SIZE genes from each pool of candidate and noncandidate genes

rule random_sample:
    input:
        rules.filter_genes.output
    output: 
        "../data/workflow/samples/{pool}_{sample}.pk"
    params:
        sample = "{sample}",
        prefix = "../data/workflow/samples/{pool}_{sample}.pk"
    script:
        "../scripts/random_sampling.py"
        
rule generate_dfe_alpha_input:
    input:
        rules.random_sample.output
    output:
        "../data/workflow/bootstrap/run_{sample}/{pool}/SFS_input.txt",
        "../data/workflow/bootstrap/run_{sample}/{pool}/divergence_file.txt"
    params:
        prefix = "../data/workflow/bootstrap/run_{sample}/{pool}"
    script:
        "../scripts/generate_dfe_alpha_input.py"

