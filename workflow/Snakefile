##### load config and sample sheets #####

configfile: "../config/config.yaml"
pool= ['candidate', 'noncandidate']
sample= list(range(config["SAMPLE_N"])) 
rule all:
    input:
        expand(["../data/workflow/pools/{pool}.pk",
        "log/notebook/01_Filter_genes_processed_{pool}.ipynb"], pool = pool),
        expand(["../data/workflow/samples/{pool}_{sample}.pk",
        "../data/workflow/bootstrap/run_{sample}/{pool}/SFS_input.txt",
        "../data/workflow/bootstrap/run_{sample}/{pool}/divergence_file.txt",
        "../data/workflow/bootstrap/run_{sample}/{pool}/est_dfe_neut_config.txt",
        "../data/workflow/bootstrap/run_{sample}/{pool}/est_dfe_sel_config.txt",
        "../data/workflow/bootstrap/run_{sample}/{pool}/est_alpha_omega_config.txt",
        "../data/workflow/bootstrap/run_{sample}/{pool}/run_est_dfe_neutral.log",
        "../data/workflow/bootstrap/run_{sample}/{pool}/run_est_dfe_selected.log",
        "../data/workflow/bootstrap/run_{sample}/{pool}/run_est_alpha_omega.log",
        "../data/workflow/bootstrap/run_{sample}/{pool}/run_prop_muts_in_s_ranges.log",
        ], pool = pool, sample = sample)
        
        
##### 1. Filter genes ##### 

rule filter_genes:
    input:
        "../data/workflow/clean_primary_data.pk",
        "../data/workflow/sampled_genes.pk",
        "../data/workflow/SFS_and_divergence.pk"
    output:
        "../data/workflow/pools/{pool}.pk"
    params:
        prefix = "../data/workflow/pools/{pool}.pk"
    log:
        notebook="log/notebook/01_Filter_genes_processed_{pool}.ipynb"
    notebook:
        "../analysis/04_filter_data/01_Filter_genes.ipynb"
     
     
#####  2. Boostrapping ##### 

#Randomly sample n = RSAMPLE_SIZE genes from each pool of candidate and noncandidate genes

rule random_sample:
    input:
        rules.filter_genes.output
    output: 
        "../data/workflow/samples/{pool}_{sample}.pk"
    params:
        sample = "{sample}",
        prefix = "../data/workflow/samples/{pool}_{sample}.pk"
    script:
        "../scripts/random_sampling.py"


#####  3. Set up files for dfe_alpha ##### 

rule generate_dfe_alpha_input:
    input:
        rules.random_sample.output
    output:
        "../data/workflow/bootstrap/run_{sample}/{pool}/SFS_input.txt",
        "../data/workflow/bootstrap/run_{sample}/{pool}/divergence_file.txt"
    params:
        prefix = "../data/workflow/bootstrap/run_{sample}/{pool}"
    script:
        "../scripts/generate_dfe_alpha_input.py"

rule generate_dfe_alpha_config:
    input:
        rules.generate_dfe_alpha_input.output
    output:
        "../data/workflow/bootstrap/run_{sample}/{pool}/est_dfe_neut_config.txt",
        "../data/workflow/bootstrap/run_{sample}/{pool}/est_dfe_sel_config.txt",
        "../data/workflow/bootstrap/run_{sample}/{pool}/est_alpha_omega_config.txt"
    params:
        config_template_dir = "../data/workflow/dfe_alpha_config_template/",
        prefix = "../data/workflow/bootstrap/run_{sample}/{pool}",
        sample = "{sample}",
        pool = "{pool}"
    script:
        "../scripts/generate_dfe_alpha_config.py"


##### 4. Running dfe_alpha ##### 

rule run_est_dfe_neutral:
    input:
        rules.generate_dfe_alpha_config.output
    output:
        "../data/workflow/bootstrap/run_{sample}/{pool}/run_est_dfe_neutral.log"
    params:
        prefix = "../data/workflow/bootstrap/run_{sample}/{pool}/",
        sample = "{sample}",
        pool = "{pool}"
    group: "dfe_alpha_group"
    shell:
        "est_dfe -c {input[0]} &> {output} "

rule run_est_dfe_selected:
    input:
        rules.generate_dfe_alpha_config.output,
        rules.run_est_dfe_neutral.output
    output:
        "../data/workflow/bootstrap/run_{sample}/{pool}/run_est_dfe_selected.log"
    params:
        prefix = "../data/workflow/bootstrap/run_{sample}/{pool}/",
        sample = "{sample}",
        pool = "{pool}"
    group: "dfe_alpha_group"
    shell:
        "est_dfe -c {input[1]} &> {output}"
        
rule run_est_alpha_omega:
    input:
        rules.generate_dfe_alpha_config.output,
        rules.run_est_dfe_selected.output
    output:
        "../data/workflow/bootstrap/run_{sample}/{pool}/run_est_alpha_omega.log"
    params:
        prefix = "../data/workflow/bootstrap/run_{sample}/{pool}/",
        sample = "{sample}",
        pool = "{pool}"
    group: "dfe_alpha_group"
    shell:
        "est_alpha_omega -c {input[2]} &> {output}"
        
rule run_prop_muts_in_s_ranges:
    input:
        rules.run_est_alpha_omega.output
    output:
        "../data/workflow/bootstrap/run_{sample}/{pool}/run_prop_muts_in_s_ranges.log"
    params:
        prefix = "../data/workflow/bootstrap/run_{sample}/{pool}/",
        sample = "{sample}",
        pool = "{pool}"
    group: "dfe_alpha_group"
    shell:
        "prop_muts_in_s_ranges -c {params.prefix}selected/est_dfe.out -o {params.prefix}output_file &> {output}"